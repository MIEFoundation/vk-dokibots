const { messageFilter, commandRegex, contentEntries, getRandomPhraseEntry } = require('../utils')

module.exports = [
	messageFilter('[–π—É—é]{1,2}—Ä–∏'),
	...contentEntries('Yuri'),
	getRandomPhraseEntry('–ø—Ä–∏–≤–µ—Ç(?:–∏–∫){0,1}|–∑–¥—Ä–∞(?:–≤—Å—Ç–≤—É–π|—Å—å{0,1})(?:—Ç–µ){0,1}', [
		'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é',
		'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!',
		'...–ü—Ä–∏–≤–µ—Ç! üëâüëà',
	]),
	getRandomPhraseEntry('–∫–∞–∫ (?:—É —Ç–µ–±—è ){0,1}–¥–µ–ª–∞', [
		'–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!',
		'–ù–µ–ø–ª–æ—Ö–æ, –∞ —É —Ç–µ–±—è?',
		'–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Ö–æ—Ç—å –∏ –Ω–µ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º',
	]),
	// Complex
	[
		commandRegex('(?:–Ω–∞–ª–µ–π |–¥–∞–π—Ç–µ ){0,1}(?:—á–∞[–π—é])(?: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞){0,1}'),
		async (ctx, next) => {
			const askedBefore = ctx.utils.get(ctx.senderId + 'askedBefore') ?? 0
			if (askedBefore) {
				ctx.reply('–†–∞–∑–≤–µ —è –Ω–µ –Ω–∞–ª–∏–≤–∞–ª–∞ —Ç–µ–±–µ —É–∂–µ? –•–æ—Ä–æ—à–æ...')
			} else {
				ctx.utils.set(ctx.senderId + 'askedBefore', askedBefore + 1)
				ctx.reply('–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å...')
			}
			const senderName = await ctx.utils.getSenderName(ctx, 'dat')
			await ctx.utils.serviceMessage(ctx, `// –Æ—Ä–∏ –Ω–∞–ª–∏–ª–∞ ${senderName} —á–∞—é`)
		}
	],
	getRandomPhraseEntry('(?:–≤–∏–Ω–æ|–≤–∏–Ω–∞[, ]?|–Ω–∞–ª–µ–π –≤–∏–Ω–æ)(?: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞){0,1}', [
		'–Ø –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ª–∏—Ç—å –≤–∏–Ω–∞, –∏–∑–≤–∏–Ω–∏.',
		'–ú–Ω–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞—é—Ç –Ω–∞–ª–∏–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–∏.',
	]),
	getRandomPhraseEntry('(?:–∫–µ–∫—Å[—ã–∏–∫]{0,3}|–¥–∞–π –∫–µ–∫—Å[—ã–æ–≤–∫–∏]{0,3})', [
		'–ó–∞ –∫–µ–∫—Å–∞–º–∏ —Ç–µ–±–µ –ª—É—á—à–µ –∫ –ù–∞—Ü—É–∫–∏',
		'–ü–æ–ø—Ä–æ—Å–∏ —É –ù–∞—Ü—É–∫–∏',
	]),
	// Reacts
	getRandomPhraseEntry(null, [
		'–°–ª—É—à–∞—é...',
		'–ß—Ç–æ-—á—Ç–æ?',
		'–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞—Ç—å?',
	]),
	getRandomPhraseEntry('(?:—Ö–æ—Ä–æ—à–∞—è|–ª—É—á—à–∞—è|–∫—Ä–∞—Å–∏–≤–∞—è|–ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è|–∫—Ä—É—Ç–∞—è|–±—É–ª–æ—á–∫–∞|–º–∏–ª–∞[—è—à–∫–∞]{0,4})', [
		'>_<',
		'–¢—ã —Ç–æ–∂–µ, –∫—Ö–µ~',
		'–≠–º–º... –°–ø–∞—Å–∏–±–æ!',
	]),
	getRandomPhraseEntry('(?:—Å—É–∫–∞|—Å–¥–æ—Ö–Ω–∏|–∏–¥–∏ –Ω–∞—Ö—É–π)', [
		'–ß... –ß—Ç–æ?',
		'–ü–æ—à—ë–ª —Ç-—Ç—ã!',
		'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å –≤–µ–∂–ª–∏–≤–µ–µ...',
	]),
	getRandomPhraseEntry('(?:–æ—Ç–¥–∞–π ){0,1}–Ω–æ–∂[—ã]{0,1}', [
		'–ö–∞–∫–æ–π –Ω–æ–∂? >_>',
		'... O_O',
	]),
	getRandomPhraseEntry('(?:–≤–µ—Ä–Ω–∏ |–æ—Ç–¥–∞–π ){0,1}—Ä—É—á–∫[–∞–∏—É]', [
		'–ö–∞–∫–∞—è —Ä—É—á–∫–∞? –¢–≤–æ—è? O_O',
		'–¢–≤–æ—è —Ä—É—á–∫–∞? –ù–µ –∑–Ω–∞—é –≥–¥–µ –æ–Ω–∞ >.<',
		'–†—É—á–∫–∞? –ì–¥–µ? (*////*)',
		'... >_>',
	]),
	getRandomPhraseEntry('—á–∞–π', [
		'–ß–∞–π?',
		'–ß—Ç–æ "—á–∞–π"?',
		'???',
	]),
	getRandomPhraseEntry('(?:—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é)', [
		'–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.',
	]),
	// Utils
	getRandomPhraseEntry('—Å–æ–≤–µ—Ç[—ã–∏–∫]{0,2}', [
		'–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –º–æ–≥—É —Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å, –º–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å —É –°–∞–π–æ—Ä–∏',
		'–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ç–µ–±–µ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å, –º–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —É –°–∞–π–æ—Ä–∏',
	]),
]
